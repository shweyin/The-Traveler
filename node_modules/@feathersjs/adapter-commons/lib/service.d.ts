import { ServiceMethods, Params, Paginated, Id, NullableId } from '@feathersjs/feathers';
export interface ServiceOptions {
    events: string[];
    multi: boolean | string[];
    id: string;
    paginate: any;
    whitelist: string[];
    filters: string[];
}
export interface InternalServiceMethods<T = any> {
    _find(params?: Params): Promise<T | T[] | Paginated<T>>;
    _get(id: Id, params?: Params): Promise<T>;
    _create(data: Partial<T> | Array<Partial<T>>, params?: Params): Promise<T | T[]>;
    _update(id: Id, data: T, params?: Params): Promise<T>;
    _patch(id: NullableId, data: Partial<T>, params?: Params): Promise<T>;
    _remove(id: NullableId, params?: Params): Promise<T>;
}
export declare class AdapterService<T = any> implements ServiceMethods<T> {
    options: ServiceOptions;
    constructor(options: Partial<ServiceOptions>);
    readonly id: string;
    readonly events: string[];
    filterQuery(params?: Params, opts?: any): {
        [key: string]: any;
    } & {
        paginate: any;
    };
    allowsMulti(method: string): boolean;
    find(params?: Params): Promise<T | T[] | Paginated<T>>;
    get(id: Id, params?: Params): Promise<T>;
    create(data: Partial<T> | Array<Partial<T>>, params?: Params): Promise<T | T[]>;
    update(id: Id, data: T, params?: Params): Promise<T>;
    patch(id: NullableId, data: Partial<T>, params?: Params): Promise<T>;
    remove(id: NullableId, params?: Params): Promise<T>;
}
