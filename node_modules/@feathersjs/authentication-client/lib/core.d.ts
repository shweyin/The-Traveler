import { FeathersError } from '@feathersjs/errors';
import { Application, Params } from '@feathersjs/feathers';
import { AuthenticationRequest, AuthenticationResult } from '@feathersjs/authentication';
import { Storage } from './storage';
export declare type ClientConstructor = new (app: Application, options: AuthenticationClientOptions) => AuthenticationClient;
export interface AuthenticationClientOptions {
    storage: Storage;
    header: string;
    scheme: string;
    storageKey: string;
    locationKey: string;
    locationErrorKey: string;
    jwtStrategy: string;
    path: string;
    Authentication: ClientConstructor;
}
export declare class AuthenticationClient {
    app: Application;
    authenticated: boolean;
    options: AuthenticationClientOptions;
    constructor(app: Application, options: AuthenticationClientOptions);
    readonly service: any;
    readonly storage: Storage;
    handleSocket(socket: any): void;
    getFromLocation(location: Location): Promise<any>;
    setAccessToken(accessToken: string): Promise<any>;
    getAccessToken(): Promise<string | null>;
    removeAccessToken(): Promise<any>;
    reset(): Promise<any>;
    handleError(error: FeathersError, type: 'authenticate' | 'logout'): Promise<any>;
    reAuthenticate(force?: boolean): Promise<AuthenticationResult>;
    authenticate(authentication?: AuthenticationRequest, params?: Params): Promise<AuthenticationResult>;
    logout(): Promise<AuthenticationResult | null>;
}
